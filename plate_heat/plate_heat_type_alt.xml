  <GraphType id="plate_heat">

    <SharedCode><![CDATA[
    #include <stdlib.h>

    //#define LESSDEBUG
    //#define USEDEBUG
    //#define VERBOSEDEBUG

    int heartbeatIndex = 0;
    ]]></SharedCode>

    <Properties><![CDATA[
    uint32_t xSize = 10;
    uint32_t ySize = 10;
    uint32_t nodeCount = 100;
#ifdef PH_ECHO
    uint32_t echoEn;
#endif
    ]]></Properties>

    <MessageTypes>
    <MessageType id="update">
        <Message><![CDATA[
    float t;
#ifdef PH_DISCARD
    uint32_t idx;
#endif
        ]]></Message>
    </MessageType>

    <MessageType id="finished">
        <Message><![CDATA[
    uint32_t x;
    uint32_t y;
    float t;
    uint32_t oCnt;
    uint32_t iCnt;
    uint32_t fin;
    uint32_t finIdx;
#ifdef PH_DISCARD
    uint32_t dropCnt;
#endif
#ifdef PH_ECHO
    uint32_t echo;
#endif
        ]]></Message>
    </MessageType>
    </MessageTypes>

    <DeviceTypes>
    <DeviceType id="cell">
        <!-- This is a common-or-garden 2d cell, with no boundary stuff -->
        <Properties><![CDATA[
        uint32_t x;
        uint32_t y;
        uint32_t dummy = 0;
        float minChg = 0.5;
#ifdef PH_ECHO
        uint32_t eEn = 0;         // Supervisor Echo enabled flag
#endif
        //float minChg = 0.03125;
        uint32_t idleMax = IDMAX_DEF;
        ]]></Properties>

        <State><![CDATA[
        float t = 0.0f;              // Our temperature
        float tIn[4] = {0.0f};
#ifdef PH_DISCARD
        uint32_t tIdx[4] = {0};
        uint32_t dropCnt = 0;
#endif
#ifdef PH_ECHO
        uint32_t eFlag = 0;         // Supervisor Echo flag
        float tEcho;
#endif
        uint32_t activePins = 0;
        uint32_t idleCnt = 0;       // Idle Count
        uint32_t updated = 0;
        uint32_t input = 0;
        uint32_t active = 0;
        uint32_t activeCount = 0;
        uint32_t fin = 0;            // Finished Flag
        uint32_t finIdx = 0;        // Finished Index
        uint32_t finSent = 0;        // Finished Sent Flag
        uint32_t oCnt = 0;
        uint32_t iCnt = 0;
        ]]></State>

        <SharedCode><![CDATA[
        #include "tinsel.h"
        #include "math.h"
        
        const float thirdMul = 1.0/3;
        
        void updateTemp(PDeviceInstance* deviceInstance)
        {
            plate_heat_cell_state_t* deviceState = static_cast<
                    plate_heat_cell_state_t*>(deviceInstance->state);
            const plate_heat_cell_properties_t* deviceProperties = static_cast<
                    const plate_heat_cell_properties_t*>(deviceInstance->properties);
            
            uint32_t edgeCnt = deviceInstance->inputPins[0].numEdges;
            
            float tCalc = 0;
            //uint32_t dCnt = 0;
            
            for(uint32_t e = 0; e < edgeCnt; e++)
            {
                if(deviceState->activePins & (1<<e))
                {
                    //dCnt++;
                    tCalc += deviceState->tIn[e];
                }
            }
            
            switch(edgeCnt){
                case 4:     tCalc = (tCalc*0.25);
                            break;
                case 3:     tCalc = (tCalc*thirdMul); //0x3eaaaaab);
                            break;
                case 2:     tCalc = (tCalc*0.5);
                            break;
                default:    break;   // 1 edge, no calc to do
            }

            //only update if the change in our temperature is large enough or we have not run yet
            if((deviceState->active == 0) || (fabs(tCalc - deviceState->t) >= deviceProperties->minChg))
            {
                deviceState->fin = 0;
                deviceState->t = tCalc;
                deviceState->active = 1;
                deviceState->updated = 1;
            }
        }
        ]]></SharedCode>

        <ReadyToSend><![CDATA[  
#ifdef PH_ECHO
        if(DEVICESTATE(eFlag))
        {
            RTSSUP();
        }
#endif  
        if((DEVICESTATE(fin) == 1) ^ (DEVICESTATE(finSent)==1))
        {
            RTSSUP();
        } else if(DEVICESTATE(updated)) {
            RTS(out);
        }
        
        *requestIdle = true;
        ]]></ReadyToSend>

        <OnDeviceIdle><![CDATA[
        if(DEVICESTATE(input) > 0)
        {   // There is a pending update to recalculate
            DEVICESTATE(idleCnt) = 0;
            DEVICESTATE(input) = 0;
            //updateTemp(deviceState, deviceProperties);
            updateTemp(deviceInstance);
        }
        else if(DEVICESTATE(active) > 0)
        {
            DEVICESTATE(idleCnt++);
            if(DEVICESTATE(idleCnt) > DEVICEPROPERTIES(idleMax))
            {   // We have hit an idle limit, flag Finished!
                DEVICESTATE(fin) = 1;
            }
        }
        ]]></OnDeviceIdle>

        <!-- Device State Handlers -->  
        <InputPin name="in" messageTypeId="update">
        <Properties><![CDATA[
        uint32_t idx;
        ]]></Properties>
        
        <OnReceive><![CDATA[
#ifdef PH_DISCARD
        if((PKT(idx) < DEVICESTATE(tIdx[EDGEPROPERTIES(idx)]))
            && (PKT(idx) != 0))
        {   // "stale" data, silently drop
            DEVICESTATE(dropCnt)++;
        } else {
#endif
        DEVICESTATE(tIn[EDGEPROPERTIES(idx)]) = PKT(t);
        DEVICESTATE(activePins) |= (1<<EDGEPROPERTIES(idx));
        DEVICESTATE(input) = 1;
        DEVICESTATE(iCnt)++;
#ifdef PH_DISCARD
        DEVICESTATE(tIdx[EDGEPROPERTIES(idx)]) = PKT(idx);
        }
#endif
        ]]></OnReceive>
        </InputPin>

        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
        PKT(t) = DEVICESTATE(t);
        DEVICESTATE(updated) = 0;
        DEVICESTATE(oCnt)++;
#ifdef PH_DISCARD
        PKT(idx) = DEVICESTATE(oCnt);
#endif
#ifdef PH_ECHO
        if(DEVICEPROPERTIES(eEn))
        {        
            DEVICESTATE(eFlag) = 1;
            DEVICESTATE(tEcho) = DEVICESTATE(t);
        }
#endif
        ]]></OnSend>
        </OutputPin>
        
        <!-- Experiment Termination Handlers -->
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
#ifdef PH_ECHO
        if(DEVICESTATE(eFlag))
        {   // Time to send an echo
            PKT(fin) = 0;
            PKT(echo) = 1;
            DEVICESTATE(eFlag) = 0;
            PKT(t) = DEVICESTATE(tEcho);
        } else
#endif
        //It's a toggle.
        if(!DEVICESTATE(finSent)) //Finished, but have not sent
        {
            DEVICESTATE(finIdx)++;    //Increment BEFORE use!!!
            DEVICESTATE(finSent) = 1;
            PKT(fin) = 1;
            PKT(t) = DEVICESTATE(t);
        } else {                  //Sent but finished cancelled
            DEVICESTATE(finSent) = 0;
            PKT(fin) = 0;
            PKT(t) = DEVICESTATE(t);
        }
        PKT(finIdx) = DEVICESTATE(finIdx);
        PKT(oCnt) = DEVICESTATE(oCnt);
        PKT(iCnt) = DEVICESTATE(iCnt);
        
#ifdef PH_DISCARD
        PKT(dropCnt) = DEVICESTATE(dropCnt);
#endif

        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
        ]]></OnSend>
        </SupervisorOutPin>
        
        <OutputPin name="heart_out" messageTypeId="heartbeat">
        <OnSend><![CDATA[   
        // Hacky heartbeat output pin for self-connecting to avoid sanity checking.
        #ifdef VERBOSEDEBUG
            handler_log(2,"HB_out");
        #endif
        ]]></OnSend>
        </OutputPin>
    </DeviceType>

    <DeviceType id="fixedNode">
        <Properties><![CDATA[
        float t = 21.0;
        uint32_t x = 0;
        uint32_t y = 0;
        uint16_t maxUpdate = 1;
        ]]></Properties>

        <State><![CDATA[
        uint16_t updateCount = 0;
        uint8_t done = 0;
        uint8_t finSent = 0;
        uint8_t updated = 0;
        ]]></State>
        
        <SharedCode><![CDATA[
          
        ]]></SharedCode>
        
        <ReadyToSend><![CDATA[
        if(DEVICESTATE(finSent) < 1){
            if(DEVICESTATE(updateCount) < DEVICEPROPERTIES(maxUpdate)) {
                RTS(out);
            } else {
                RTSSUP();
            }
        }
        ]]></ReadyToSend>
        
        <OnInit><![CDATA[
        return 1;       // Trigger RTS
        ]]></OnInit>
        
        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"F_OUT");
        #endif
            PKT(t) = DEVICEPROPERTIES(t);
            DEVICESTATE(updateCount)++;
        ]]></OnSend>
        </OutputPin>
        
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
        PKT(fin) = 1;
        PKT(finIdx) = 1;
        PKT(t) = DEVICEPROPERTIES(t);
        
        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
        
        DEVICESTATE(finSent) = 1;
        
        #ifdef USEDEBUG
            handler_log(2,"F_FIN_SENT");
        #endif
        ]]></OnSend>
        </SupervisorOutPin>
        
        <OnDeviceIdle><![CDATA[
        if(DEVICESTATE(finSent) < 1) return 1;
        // Nothing to do
        ]]></OnDeviceIdle>
    </DeviceType>
      
    <SupervisorType id="supervisorNode">
        <Code><![CDATA[
        #include <fstream>
        #include <iostream>
        #include <sstream>
        #include <string>
        #include <cstdio>
        #include <iomanip>
        #include <cmath>
        #include <vector>
        #include <chrono>
        
        #define USEDEBUG
        //#define VERBOSEDEBUG
        
        #ifdef USEDEBUG
          #define DEBUG_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define DEBUG_PRINT(x)
        #endif
        
        #ifdef VERBOSEDEBUG
          #define VERBOSE_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define VERBOSE_PRINT(x)
        #endif
        
        //DEBUG_PRINT("HEATED_PLATE_SUPERVISOR");
        //DEBUG_PRINT("3x3, 9 cells");
        
        typedef struct nodeDataType
        {
            uint32_t fin = 0;
            uint32_t finIdx = 0;
            uint32_t oCnt = 0;
            uint32_t iCnt = 0;
            float t = 0.0f;  
#ifdef PH_DISCARD
            uint32_t dropCnt = 0;
#endif
#ifdef PH_ECHO
            uint32_t eInit = 0;
#endif
        } nodeData_t;

        ]]></Code>
        
        <Properties><![CDATA[
        uint32_t xSize = XSIZE_DEF;
        uint32_t ySize = YSIZE_DEF;
        uint32_t nodeCount = NODE_DEF;
        uint32_t loopMax = 1000;
        ]]></Properties>
            
        <State><![CDATA[
        std::vector<nodeData_t> data = std::vector<nodeData_t>(NODE_DEF);
        uint32_t loopCount = 0;
        
        uint32_t finCount = 0;
        uint32_t finRec = 0;
        
        time_t tStart;
        time_t tEnd;
        
        std::chrono::high_resolution_clock::time_point cStart;
        std::chrono::high_resolution_clock::time_point cEnd;
        ]]></State>
        

        <!-- XSIZE_DEF, YSIZE_DEF and NODE_DEF are replaced by the generator. -->
        <!-- This is a complete hack and needs some thought in how to parameterise. -->
        <SupervisorInPin id="finished" messageTypeId="finished">
          <OnReceive><![CDATA[
            VERBOSE_PRINT("MSG:");
            if((PKT(x) >= SUPPROPERTIES(xSize)) || (PKT(y) >= SUPPROPERTIES(ySize)))
            {
              //Something has gone horribly wrong and we have received a message for a node that can't exist.
              DEBUG_PRINT("ERR_MSG_CELL_NE");
            } else {
              uint64_t loc = (PKT(x) * SUPPROPERTIES(xSize)) + PKT(y);
              
#ifdef PH_ECHO
              if(PKT(echo))
              { // It's an echo packet, write to file.
                std::ofstream eFile;
                std::ostringstream sst;
                sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_echo.txt";
                
                if(SUPSTATE(data[loc].eInit) == 0)
                {
                  eFile.open(sst.str());
                  SUPSTATE(data[loc].eInit) = 1;
                }
                else
                {
                  eFile.open(sst.str(),std::ofstream::out | std::ofstream::app);
                }
                
                eFile << PKT(x) << ", " << PKT(y) << ", ";
                eFile << PKT(oCnt) << ", " << PKT(t) << std::endl;
                eFile.close();
              } else 
#endif
              if(PKT(fin) && (PKT(finIdx) > SUPSTATE(data[loc].finIdx)))
              {
                //It's a finished message that is newer than what we have.
                VERBOSE_PRINT("\tFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx) << " T:"  << PKT(t));

                if(SUPSTATE(finRec) == 0)
                {
                  //First rec, start timing.
                  SUPSTATE(finRec) = 1;
                  SUPSTATE(tStart) = std::time(NULL);
                  SUPSTATE(cStart) = std::chrono::high_resolution_clock::now();
                  std::ofstream tFile;
                  std::ostringstream sst;
                  sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                  tFile.open(sst.str());
                  tFile << PKT(x) << "," << PKT(y) << "\tEpoch: ";
                  tFile << SUPSTATE(tStart) << "\t\t chrono: ";
                  tFile << SUPSTATE(cStart).time_since_epoch().count()  << std::endl;
                  tFile.close();
                }

                if(!SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)++; }; //Node is not already finished.

                SUPSTATE(data[loc].fin) = 1;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                SUPSTATE(data[loc].oCnt) = PKT(oCnt);
                SUPSTATE(data[loc].iCnt) = PKT(iCnt);
#ifdef PH_DISCARD
                SUPSTATE(data[loc].dropCnt) = PKT(dropCnt);
#endif
                

              } else if(!(PKT(fin)) && PKT(finIdx) >= SUPSTATE(data[loc].finIdx)) {
                //It's a not finished message cancelling the current or future finished message
                VERBOSE_PRINT("\tNFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
                if(SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)--; }; //Node is already finished.

                SUPSTATE(data[loc].fin) = 0;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                SUPSTATE(data[loc].oCnt) = PKT(oCnt);
                SUPSTATE(data[loc].iCnt) = PKT(iCnt);
#ifdef PH_DISCARD
                SUPSTATE(data[loc].dropCnt) = PKT(dropCnt);
#endif
                
              } else {//Otherwise do nothing with the finish message as it is a duplicate.
                VERBOSE_PRINT("\tIGNORED:" << PKT(fin) << " " << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
              }
              
              //DEBUG_PRINT("\tFINCOUNT:" << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount) << " " << PKT(x) << "," << PKT(y));
              
              //Periodic node count updates
              if(SUPSTATE(loopCount) == 0){
                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount));
                SUPSTATE(loopCount) = SUPPROPERTIES(loopMax);
              }
              SUPSTATE(loopCount)--;

              if(SUPSTATE(finCount) >= SUPPROPERTIES(nodeCount))
              { //All of the nodes have finished, do something.
              
                //Last rec, Finish timing.
                SUPSTATE(tEnd) = std::time(NULL);
                SUPSTATE(cEnd) = std::chrono::high_resolution_clock::now();
                std::chrono::duration<double> diff = SUPSTATE(cEnd) - SUPSTATE(cStart);
                
                std::ofstream tFile;
                std::ostringstream sst;
                sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                tFile.open(sst.str(), std::ofstream::out | std::ofstream::app);
                tFile << PKT(x) << "," << PKT(y) << ":"  << "\tend Epoch: ";
                tFile << SUPSTATE(tEnd) << "\t\t end chrono: ";
                tFile << SUPSTATE(cEnd).time_since_epoch().count() << std::endl;
                tFile << "\tElapsed(s): " << (SUPSTATE(tEnd)-SUPSTATE(tStart));
                tFile << "\t(" << diff.count() << ")" << std::endl;                  
                tFile.close();

                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount));
                //handler_log(2, "ALL NODES_DONE");

                //TODO: Send Data to MPI Land. Or write to file.

                //Wite data to CSV
                std::ofstream oFile;
                std::ostringstream ss;

                ss << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_out.csv";
                oFile.open(ss.str());
                DEBUG_PRINT("\tOFILE_OPEN: " << ss.str()) ;
                //oFile.precision(2);
                oFile << std::fixed << std::setprecision(2);

                oFile << "x, y, temp, finCount, outCount, inCount";
#ifdef PH_DISCARD
                oFile << ", dropCnt";
#endif
                oFile << std::endl;
                
                DEBUG_PRINT("\tRESULTS_WRITE");

                for(unsigned int ix = 0; ix < SUPPROPERTIES(xSize); ix++)
                {
                  loc = ix*SUPPROPERTIES(xSize);
                  for(unsigned int iy = 0; iy < SUPPROPERTIES(ySize); iy++)
                  {
                    oFile << ix << ", " << iy << ", ";
                    oFile << SUPSTATE(data[loc].t)  << ", ";
                    oFile << SUPSTATE(data[loc].finIdx)  << ", ";
                    oFile << SUPSTATE(data[loc].oCnt)  << ", ";
                    oFile << SUPSTATE(data[loc].iCnt);
#ifdef PH_DISCARD
                    oFile  << ", " << SUPSTATE(data[loc].dropCnt);
#endif
                    oFile << std::endl;
                    loc++;
                  }
                }
                DEBUG_PRINT("\tRESULTS_WRITTEN");
                
                oFile.close();
                DEBUG_PRINT("\tOFILE_CLOSE");
                DEBUG_PRINT("\tPROBLEM " << SUPPROPERTIES(xSize) << "x" <<
                    SUPPROPERTIES(ySize) << " COMPLETE in " <<
                    (SUPSTATE(tEnd) - SUPSTATE(tStart)) << " seconds (" <<
                    diff.count() << "s)");
              }
            }
          ]]></OnReceive>
        </SupervisorInPin>
    </SupervisorType>
    </DeviceTypes>
  </GraphType>