  <GraphType id="plate_heat">

    <SharedCode><![CDATA[
    #include <stdlib.h>
    #include <cmath>

    //#define LESSDEBUG
    //#define USEDEBUG
    //#define VERBOSEDEBUG

    int heartbeatIndex = 0;
    ]]></SharedCode>

    <Properties><![CDATA[
    uint32_t xSize = 10;
    uint32_t ySize = 10;
    uint32_t nodeCount = 100;
    ]]></Properties>

    <MessageTypes> 
    <MessageType id="heartbeat">
        <Message><![CDATA[
        ]]></Message>
    </MessageType>

    <MessageType id="update">
        <Message><![CDATA[
    float t;
        ]]></Message>
    </MessageType>

    <MessageType id="finished">
        <Message><![CDATA[
    uint32_t x;
    uint32_t y;
    float t;
    uint32_t finIdx;
    uint32_t nCnt;
    uint32_t eCnt;
    uint32_t sCnt;
    uint32_t wCnt;
    uint32_t oCnt;
    uint8_t fin;
        ]]></Message>
    </MessageType>
    </MessageTypes>

    <DeviceTypes>
    <DeviceType id="cell">
        <!-- This is a common-or-garden 2d cell, with no boundary stuff -->
        <Properties><![CDATA[
        uint32_t x;
        uint32_t y;
        uint32_t dummy = 0;
        float minChg = 0.5;
        //float minChg = 0.03125;
        uint16_t hcMax = HCMAX_DEF;
        ]]></Properties>

        <State><![CDATA[
        float t = 0.0;              // Our temperature
        uint16_t hc = 0;            // Heartbeat Count
        uint8_t updated = 0;
        uint8_t active = 0;
        uint8_t activeCount = 0;
        uint8_t fin = 0;            // Finished Flag
        uint8_t finSent = 0;        // Finished Sent Flag
        uint16_t finIdx = 0;        // Finished Index

        float tNorth = 0.0;         // North temperature
        uint8_t nNorth = 0;         // Are we connected to the North? 
                                    // Could be a property if we don't discover...

        float tEast = 0.0;          // East temperature
        uint8_t nEast = 0;          // Are we connected to the East?

        float tSouth = 0.0;         // South temperature
        uint8_t nSouth = 0;         // Are we connected to the South?

        float tWest = 0.0;          // West temperature
        uint8_t nWest = 0;          // Are we connected to the West?
                  
        uint32_t nCnt = 0;
        uint32_t eCnt = 0;
        uint32_t sCnt = 0;
        uint32_t wCnt = 0;
        uint32_t oCnt = 0;
        ]]></State>

        <SharedCode><![CDATA[
        #include "tinsel.h"

        typedef struct device_state
        {
            float t;
            uint16_t hc;
            uint8_t updated;
            uint8_t active;
            uint8_t activeCount;
            uint8_t fin;
            uint8_t finSent;
            uint16_t finIdx;
            float tNorth;
            uint8_t nNorth;
            float tEast;
            uint8_t nEast;
            float tSouth;
            uint8_t nSouth;
            float tWest;
            uint8_t nWest;
            uint32_t nCnt;
            uint32_t eCnt;
            uint32_t sCnt;
            uint32_t wCnt;
            uint32_t oCnt;
        }  device_state_t;

        const float thirdMul = 1.0/3;

        typedef struct device_properties
        {
            uint32_t x;
            uint32_t y;
            uint32_t dummy;
            float minChg;
            uint16_t hcMax;
        }  device_properties_t;

        void updateTemp(void* state, const void* props)
        {
            device_state_t* deviceState = static_cast<device_state_t*>(state);
            const device_properties_t* deviceProperties = static_cast<const device_properties_t*>(props);
            float tCalc = 0;

            tCalc += deviceState->tNorth;
            tCalc += deviceState->tEast;
            tCalc += deviceState->tSouth;
            tCalc += deviceState->tWest;

            switch(deviceState->activeCount){
                case 4:     tCalc = (tCalc*0.25);
                            break;
                case 3:     tCalc = (tCalc*thirdMul); //0x3eaaaaab);
                            break;
                case 2:     tCalc = (tCalc*0.5);
                            break;
                default:    break;   // 1 edge, no calc to do
        }

        //only update if the change in our temperature is large enough or we have not run yet
        if((deviceState->active == 0) || (fabs(tCalc - deviceState->t) >= deviceProperties->minChg))
        {
            deviceState->hc = 0;
            deviceState->fin = 0;
            deviceState->t = tCalc;
            deviceState->active = 1;
            deviceState->updated = 1;
            heartbeatIndex = 0;
        }

        //return tCalc;
        }
        ]]></SharedCode>

        <ReadyToSend><![CDATA[  
        if((DEVICESTATE(fin) == 1) ^ (DEVICESTATE(finSent)==1))
        {
            RTSSUP();
        } else if(DEVICESTATE(updated)) {
            RTS(out);
        }
        ]]></ReadyToSend>

        <OnDeviceIdle><![CDATA[
        /* HACKS ABOUND: we manually throw a packet at ourselves to trigger a HB. */
        
        if(deviceInstance->deviceID == 0)
        {
            if(heartbeatIndex > HBIDX_DEF)  // Execute on every tenth OnIdle.
            {
                heartbeatIndex = 0;
                P_Msg_t hbMsg;
                P_Msg_Hdr_t* hdr = &(hbMsg.header);
                
                // Form the Pin Address
                hdr->swAddr = ((P_ADDR_BROADCAST << P_SW_DEVICE_SHIFT) & P_SW_DEVICE_MASK);
                hdr->pinAddr = (((deviceInstance->numInputs-1) << P_HD_TGTPIN_SHIFT)
                                  & P_HD_TGTPIN_MASK);     //HB is last pin
                hdr->pinAddr |= ((0 << P_HD_DESTEDGEINDEX_SHIFT)
                                  & P_HD_DESTEDGEINDEX_MASK);     // Broadcast
                
                softswitch_onReceive(deviceInstance->thread, &hbMsg);                
            }
            else
            {
                heartbeatIndex++;
            }
            return(1);
        }
        ]]></OnDeviceIdle>

        <!-- Device State Handlers -->       
        <InputPin name="north_in" messageTypeId="update">
        <OnReceive><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"N_IN");
        #endif
            if(DEVICESTATE(nNorth) == 0)
            {
              DEVICESTATE(nNorth) = 1;
              DEVICESTATE(activeCount)++;
            }
            
            DEVICESTATE(tNorth) = PKT(t);
            DEVICESTATE(nCnt)++;
            updateTemp(deviceState, deviceProperties);
        ]]></OnReceive>
        </InputPin>

        <InputPin name="east_in" messageTypeId="update">
        <OnReceive><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"E_IN");
        #endif
            if(DEVICESTATE(nEast) == 0)
            {
              DEVICESTATE(nEast) = 1;
              DEVICESTATE(activeCount)++;
            }
            
            DEVICESTATE(tEast) = PKT(t);
            DEVICESTATE(eCnt++);
            updateTemp(deviceState, deviceProperties);
        ]]></OnReceive>
        </InputPin>

        <InputPin name="south_in" messageTypeId="update">
        <OnReceive><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"S_IN");
        #endif
            if(DEVICESTATE(nSouth) == 0)
            {
              DEVICESTATE(nSouth) = 1;
              DEVICESTATE(activeCount)++;
            }
            
            DEVICESTATE(tSouth) = PKT(t);
            DEVICESTATE(sCnt)++;
            updateTemp(deviceState, deviceProperties);
        ]]></OnReceive>
        </InputPin>

        <InputPin name="west_in" messageTypeId="update">
        <OnReceive><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"W_IN");
        #endif
            if(DEVICESTATE(nWest) == 0)
            {
              DEVICESTATE(nWest) = 1;
              DEVICESTATE(activeCount)++;
            }
            
            DEVICESTATE(tWest) = PKT(t);
            DEVICESTATE(wCnt)++;
            updateTemp(deviceState, deviceProperties);
        ]]></OnReceive>
        </InputPin>

        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"C_OUT");
        #endif
            PKT(t) = DEVICESTATE(t);
            DEVICESTATE(oCnt)++;
            DEVICESTATE(updated) = 0;
        ]]></OnSend>
        </OutputPin>
        
        <!-- Experiment Termination Handlers -->
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
        //It's a toggle.
        if(!DEVICESTATE(finSent)) //Finished, but have not sent
        {
            DEVICESTATE(finIdx)++;    //Increment BEFORE use!!!
            DEVICESTATE(finSent) = 1;
            message->fin = 1;
        #ifdef USEDEBUG
            handler_log(2,"FIN_SENT");
        #endif
        #ifdef LESSDEBUG
            if(deviceInstance->deviceID == 0) {
                handler_log(2,"FIN_SENT");
            }
        #endif
        } else {                  //Sent but finished cancelled
            DEVICESTATE(finSent) = 0;
            PKT(fin) = 0;
        #ifdef USEDEBUG
            handler_log(2,"FIN_CANCEL");
        #endif
        }
        PKT(finIdx) = DEVICESTATE(finIdx);
        PKT(t) = DEVICESTATE(t);

        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
        
        PKT(nCnt) = DEVICESTATE(nCnt);
        PKT(eCnt) = DEVICESTATE(eCnt);
        PKT(sCnt) = DEVICESTATE(sCnt);
        PKT(wCnt) = DEVICESTATE(wCnt);
        PKT(oCnt) = DEVICESTATE(oCnt);
        ]]></OnSend>
        </SupervisorOutPin>
        
        <OutputPin name="heart_out" messageTypeId="heartbeat">
        <OnSend><![CDATA[   
        // Hacky heartbeat output pin for self-connecting to avoid sanity checking.
        #ifdef VERBOSEDEBUG
            handler_log(2,"HB_out");
        #endif
        ]]></OnSend>
        </OutputPin>

        <InputPin name="heart_in" messageTypeId="heartbeat">
        <OnReceive><![CDATA[
            if(DEVICESTATE(active) && (DEVICESTATE(finSent)==0)) {
                DEVICESTATE(hc)++;
            
        #ifdef VERBOSEDEBUG
                handler_log(2,"HB_REC");
        #endif

                if(DEVICESTATE(hc) >= DEVICEPROPERTIES(hcMax))
                {
                    DEVICESTATE(fin) = 1;
                }
            } else {
        #ifdef VERBOSEDEBUG
                //handler_log(1,"HB_IGN");
        #endif
            }
        ]]></OnReceive>
        </InputPin>
    </DeviceType>

    <DeviceType id="fixedNode">
        <Properties><![CDATA[
        float t = 21.0;
        uint32_t x = 0;
        uint32_t y = 0;
        uint16_t maxUpdate = 1;
        ]]></Properties>

        <State><![CDATA[
        uint16_t updateCount = 0;
        uint8_t done = 0;
        uint8_t finSent = 0;
        uint8_t updated = 0;
        ]]></State>
        
        <SharedCode><![CDATA[
          
        ]]></SharedCode>
        
        <ReadyToSend><![CDATA[
        if(DEVICESTATE(finSent) < 1){
            if(DEVICESTATE(updateCount) < DEVICEPROPERTIES(maxUpdate)) {
                RTS(out);
            } else {
                RTSSUP();
            }
        }
        ]]></ReadyToSend>
        
        <OnInit><![CDATA[
        return 1;       // Trigger RTS
        ]]></OnInit>
        
        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
        #ifdef VERBOSEDEBUG
            handler_log(2,"F_OUT");
        #endif
            PKT(t) = DEVICEPROPERTIES(t);
            DEVICESTATE(updateCount)++;
        ]]></OnSend>
        </OutputPin>
        
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
        PKT(fin) = 1;
        PKT(finIdx) = 1;
        PKT(t) = DEVICEPROPERTIES(t);
        
        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
        
        PKT(nCnt) = 0;
        PKT(eCnt) = 0;
        PKT(sCnt) = 0;
        PKT(wCnt) = 0;
        PKT(oCnt) = 1;
        
        DEVICESTATE(finSent) = 1;
        
        #ifdef USEDEBUG
            handler_log(2,"F_FIN_SENT");
        #endif
        ]]></OnSend>
        </SupervisorOutPin>
        
        <OnDeviceIdle><![CDATA[
        if(DEVICESTATE(finSent) < 1) return 1;
        // Nothing to do
        ]]></OnDeviceIdle>
    </DeviceType>
      
    <SupervisorType id="supervisorNode">
        <Code><![CDATA[
        #include <fstream>
        #include <iostream>
        #include <sstream>
        #include <string>
        #include <cstdio>
        #include <iomanip>
        #include <cmath>
        #include <vector>
        
        #define USEDEBUG
        //#define VERBOSEDEBUG
        
        #ifdef USEDEBUG
          #define DEBUG_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define DEBUG_PRINT(x)
        #endif
        
        #ifdef VERBOSEDEBUG
          #define VERBOSE_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define VERBOSE_PRINT(x)
        #endif
        
        //DEBUG_PRINT("HEATED_PLATE_SUPERVISOR");
        //DEBUG_PRINT("3x3, 9 cells");
        
        typedef struct nodeDataType
        {
            uint8_t fin = 0;
            uint16_t finIdx = 0;
            float t = 0.0;
            uint32_t nCnt = 0;
            uint32_t eCnt = 0;
            uint32_t sCnt = 0;
            uint32_t wCnt = 0;
            uint32_t oCnt = 0;
        } nodeData_t;

        ]]></Code>
        
        <Properties><![CDATA[
        uint32_t xSize = XSIZE_DEF;
        uint32_t ySize = YSIZE_DEF;
        uint32_t nodeCount = NODE_DEF;
        uint32_t loopMax = 1000;
        ]]></Properties>
            
        <State><![CDATA[
        std::vector<nodeData_t> data = std::vector<nodeData_t>(NODE_DEF);
        uint32_t loopCount = 0;
        
        uint32_t finCount = 0;
        uint8_t finRec = 0;
        
        time_t tStart;
        time_t tEnd;
        ]]></State>
        

        <!-- XSIZE_DEF, YSIZE_DEF and NODE_DEF are replaced by the generator. -->
        <!-- This is a complete hack and needs some thought in how to parameterise. -->
        <SupervisorInPin id="finished" messageTypeId="finished">
          <OnReceive><![CDATA[
            VERBOSE_PRINT("MSG:");
            if((PKT(x) >= SUPPROPERTIES(xSize)) || (PKT(y) >= SUPPROPERTIES(ySize)))
            {
              //Something has gone horribly wrong and we have received a message for a node that can't exist.
              DEBUG_PRINT("ERR_MSG_CELL_NE");
            } else {
              uint64_t loc = (PKT(x) * SUPPROPERTIES(xSize)) + PKT(y);
              
              if(PKT(fin) && (PKT(finIdx) > SUPSTATE(data[loc].finIdx)))
              {
                //It's a finished message that is newer than what we have.
                VERBOSE_PRINT("\tFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx) << " T:"  << PKT(t));

                if(SUPSTATE(finRec) == 0)
                {
                  //First rec, start timing.
                  SUPSTATE(finRec) = 1;
                  SUPSTATE(tStart) = std::time(NULL);
                  std::ofstream tFile;
                  std::ostringstream sst;
                  sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                  tFile.open(sst.str());
                  tFile << PKT(x) << "," << PKT(y) << ":" << SUPSTATE(tStart) << std::endl;
                  tFile.close();
                }

                if(!SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)++; }; //Node is not already finished.

                SUPSTATE(data[loc].fin) = 1;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                
                SUPSTATE(data[loc].nCnt) = PKT(nCnt);
                SUPSTATE(data[loc].eCnt) = PKT(eCnt);
                SUPSTATE(data[loc].sCnt) = PKT(sCnt);
                SUPSTATE(data[loc].wCnt) = PKT(wCnt);
                SUPSTATE(data[loc].oCnt) = PKT(oCnt);
                

              } else if(!(PKT(fin)) && PKT(finIdx) >= SUPSTATE(data[loc].finIdx)) {
                //It's a not finished message cancelling the current or future finished message
                VERBOSE_PRINT("\tNFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
                if(SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)--; }; //Node is already finished.

                SUPSTATE(data[loc].fin) = 0;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                
                SUPSTATE(data[loc].nCnt) = PKT(nCnt);
                SUPSTATE(data[loc].eCnt) = PKT(eCnt);
                SUPSTATE(data[loc].sCnt) = PKT(sCnt);
                SUPSTATE(data[loc].wCnt) = PKT(wCnt);
                SUPSTATE(data[loc].oCnt) = PKT(oCnt);
                
              } else {//Otherwise do nothing with the finish message as it is a duplicate.
                VERBOSE_PRINT("\tIGNORED:" << PKT(fin) << " " << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
              }
              
              //DEBUG_PRINT("\tFINCOUNT:" << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount) << " " << PKT(x) << "," << PKT(y));
              
              //Periodic node count updates
              if(SUPSTATE(loopCount) == 0){
                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount));
                SUPSTATE(loopCount) = SUPPROPERTIES(loopMax);
              }
              SUPSTATE(loopCount)--;

              if(SUPSTATE(finCount) >= SUPPROPERTIES(nodeCount))
              { //All of the nodes have finished, do something.
              
                //Last rec, Finish timing.
                SUPSTATE(tEnd) = std::time(NULL);
                std::ofstream tFile;
                std::ostringstream sst;
                sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                tFile.open(sst.str(), std::ofstream::out | std::ofstream::app);
                tFile << PKT(x) << "," << PKT(y) << ":" << SUPSTATE(tEnd) << "\tElapsed(s): ";
                tFile << (SUPSTATE(tEnd) - SUPSTATE(tStart))<< std::endl;
                tFile.close();

                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount));
                //handler_log(2, "ALL NODES_DONE");

                //TODO: Send Data to MPI Land. Or write to file.

                //Wite data to CSV
                std::ofstream oFile;
                std::ostringstream ss;

                ss << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_out.csv";
                oFile.open(ss.str());
                DEBUG_PRINT("\tOFILE_OPEN: " << ss.str()) ;
                //oFile.precision(2);
                oFile << std::fixed << std::setprecision(2);

                oFile << "x, y, temp, finCount, outCount, ";
                oFile << "inCount, nInCount, eInCount, sInCount, wInCount";
                oFile << std::endl;
                
                DEBUG_PRINT("\tRESULTS_WRITE");

                for(unsigned int ix = 0; ix < SUPPROPERTIES(xSize); ix++)
                {
                  loc = ix*SUPPROPERTIES(xSize);
                  for(unsigned int iy = 0; iy < SUPPROPERTIES(ySize); iy++)
                  {
                    oFile << ix << ", " << iy << ", ";
                    oFile << SUPSTATE(data[loc].t)  << ", ";
                    oFile << SUPSTATE(data[loc].finIdx)  << ", ";
                    
                    oFile << SUPSTATE(data[loc].oCnt)  << ", ";
                    
                    oFile << ( SUPSTATE(data[loc].nCnt)
                             + SUPSTATE(data[loc].eCnt)
                             + SUPSTATE(data[loc].sCnt)
                             + SUPSTATE(data[loc].wCnt) ) << ", ";
                    
                    oFile << SUPSTATE(data[loc].nCnt)  << ", ";
                    oFile << SUPSTATE(data[loc].eCnt)  << ", ";
                    oFile << SUPSTATE(data[loc].sCnt)  << ", ";
                    oFile << SUPSTATE(data[loc].wCnt)  << ", ";
                    oFile << std::endl;
                    loc++;
                  }
                }
                DEBUG_PRINT("\tRESULTS_WRITTEN");
                
                oFile.close();
                DEBUG_PRINT("\tOFILE_CLOSE");
                DEBUG_PRINT("\tPROBLEM " << SUPPROPERTIES(xSize) << "x" <<
                        SUPPROPERTIES(ySize) << " COMPLETE in " <<
                        (SUPSTATE(tEnd) - SUPSTATE(tStart)) << " seconds");
              }
            }
          ]]></OnReceive>
        </SupervisorInPin>
    </SupervisorType>
    </DeviceTypes>
  </GraphType>