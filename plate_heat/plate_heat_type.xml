  <GraphType id="plate_heat">
  
    <SharedCode><![CDATA[
    #include <stdlib.h>
    #include <cmath>
    ]]></SharedCode>
    
    <Properties>
      <Scalar type="uint32_t" name="xSize" default="10"/>
      <Scalar type="uint32_t" name="ySize" default="10"/>
      <Scalar type="uint32_t" name="nodeCount" default="100"/>
    </Properties>
    
    <MessageTypes>
      <MessageType id="heartbeat">
      </MessageType>
      
      <MessageType id="update">
        <Message>
          <Scalar type="float" name="t"/>
        </Message>
      </MessageType>
      
      <MessageType id="finished">
        <Message>
          <Tuple name="v">
            <Scalar type="float" name="t"/>
            <Scalar type="uint8_t" name="fin"/>
            <Scalar type="uint16_t" name="finIdx"/>
            <Scalar type="uint32_t" name="x"/>
            <Scalar type="uint32_t" name="y"/>
          </Tuple>
        </Message>
      </MessageType>
      
      <MessageType id="exit">
      </MessageType>
    </MessageTypes>
  
    <DeviceTypes>
      <DeviceType id="cell">
        <!-- This is a common-or-garden 2d cell, with no boundary stuff -->
        <Properties>
          <Scalar type="float" name="minChg" default="0.1"/>
          <Scalar type="uint16_t" name="hcMax" default="10"/>
          <Scalar type="uint32_t" name="x"/>
          <Scalar type="uint32_t" name="y"/>
        </Properties>
        
        <State>
          <Scalar type="float" name="t" default="0.0"/>            <!-- Our temperature -->
          <Scalar type="uint16_t" name="hc" default="0"/>        <!-- Heartbeat Count -->
          <Scalar type="uint8_t" name="updated" default="0"/>
          <Scalar type="uint8_t" name="fin" default="0"/>        <!-- Finished Flag -->
          <Scalar type="uint8_t" name="finSent" default="0"/>        <!-- Finished Flag -->
          <Scalar type="uint16_t" name="finIdx" default="0"/>        <!-- Finished Index -->
        
          <Scalar type="float" name="tNorth"/>        <!-- North temperature -->
          <Scalar type="uint8_t" name="nNorth" default="0"/>    <!-- Are we connected to the North? Could be done as a property if we don't discover... -->
          
          <Scalar type="float" name="tEast"/>        <!-- East temperature -->
          <Scalar type="uint8_t" name="nEast" default="0"/>    <!-- Are we connected to the East? -->
          
          <Scalar type="float" name="tSouth"/>        <!-- South temperature -->
          <Scalar type="uint8_t" name="nSouth" default="0"/>    <!-- Are we connected to the South? -->
          
          <Scalar type="float" name="tWest"/>        <!-- West temperature -->
          <Scalar type="uint8_t" name="nWest" default="0"/>    <!-- Are we connected to the West? -->
        </State>
        
        <SharedCode><![CDATA[
          void updateTemp(void)
          {
            //float tCalc = deviceState->t;
            //uint8_t count = 1;
            
            float t = deviceState->t;
            float tCalc = 0;
            uint8_t count = 0;
            
            if(deviceState->nNorth) {
              tCalc += deviceState->tNorth;
              count++;
            }
            
            if(deviceState->nEast) {
              tCalc += deviceState->tEast;
              count++;
            }
            
            if(deviceState->nSouth) {
              tCalc += deviceState->tSouth;
              count++;
            }
            
            if(deviceState->nWest) {
              tCalc += deviceState->tWest;
              count++;
            }
            
            tcalc = tcalc/count;
            
            if(abs(tcalc - t) >= deviceProperties->minChg)  //only update if the change in out temperature is large enough
            {
              deviceState->hc = 0;
              deviceState->updated = 1;
              deviceState->t = tcalc;
            }
          }
        ]]></SharedCode>

        <ReadyToSend><![CDATA[
          *readyToSend = 0;
          
          if(deviceState->fin ^ deviceState->finSent) 
          {
            *readyToSend = RTS_FLAG_finished
          } else if(deviceState->updated) {
            *readyToSend = RTS_FLAG_out
          }
        ]]></ReadyToSend>
        
        <OnCompute><![CDATA[
          //TODO: Write heartbeat code
          
          if(deviceInstance->deviceID == 0)
          {           
            P_Msg_t hbMsg;
            
            hbMsg.header.messageLenBytes = sizeof(P_Msg_Hdr_t); // HB is only a header.
            hbMsg.header.destEdgeIndex = 0; 
            hbMsg.header.destPin = (deviceInstance->numInputs - 1); //HB is last pin
            hbMsg.header.messageTag = 0; //HB is first declared message
            
            for(int i; i < thread->numDevInsts; i++)    //Loop through the devices on this softswitch
            {
              hbMsg.header.destDeviceAddr = i;
              softswitch_onReceive(deviceInstance->thread, &hbMsg);
            }
          }
        ]]></OnCompute>

        <!-- Device State Handlers -->
        <InputPin name="north_in" messageTypeId="update">
          <OnReceive><![CDATA[
            deviceState->tNorth = 1;
            deviceState->tNorth = message->t;
            updateTemp();
          ]]></OnReceive>
        </InputPin>
        
        <InputPin name="east_in" messageTypeId="update">
          <OnReceive><![CDATA[
            deviceState->tEast = 1;
            deviceState->tEast = message->t;
            updateTemp();
          ]]></OnReceive>
        </InputPin>
        
        <InputPin name="south_in" messageTypeId="update">
          <OnReceive><![CDATA[
            deviceState->tSouth = 1;
            deviceState->tSouth = message->t;
            updateTemp();
          ]]></OnReceive>
        </InputPin>
        
        <InputPin name="west_in" messageTypeId="update">
          <OnReceive><![CDATA[
            deviceState->tWest = 1;
            deviceState->tWest = message->t;
            updateTemp();
          ]]></OnReceive>
        </InputPin>

        <OutputPin name="out" messageTypeId="update">
          <OnSend><![CDATA[
            deviceState->updated = 0;
            message->t = deviceState->t;
          ]]></OnSend>
        </OutputPin>
        
        <!-- Experiment Termination Handlers -->
        <OutputPin name="finished" messageTypeId="finished">
          <OnSend><![CDATA[
            if(!deviceState->finSent)
            {
              deviceState->finIdx++;    //Increment BEFORE use!!!
              deviceState->finSent = 1;
              message->fin = 1;
            } else {
              deviceState->finSent = 0;
              message->fin = 0;  
            }
            message->finIdx = deviceState->finIdx;
            message->t = deviceState->t;
            
            message->x = deviceProperties->x;
            message->y = deviceProperties->y;
          ]]></OnSend>
        </OutputPin>
        
        <InputPin name="done" messageTypeId="exit">
          <OnReceive><![CDATA[
            device->thread->ctrlEnd = 1;
          ]]></OnReceive>
        </InputPin>
        
        <InputPin name="heart_in" messageTypeId="heartbeat">
          <OnReceive><![CDATA[
            deviceState->hc++;
            
            if(deviceState->hc >= deviceProperties->hcMax)
            {
              deviceState->fin = 1;
            }
          ]]></OnReceive>
        </InputPin>
      </DeviceType>
      
      <DeviceType id="fixedNode">
        <Properties>
          <Scalar name="t" type="float" default="21.0"/>
          <Scalar type="uint16_t" name="maxSpin" default="10"/>
          <Scalar type="uint16_t" name="maxUpdate" default="5"/>
          <Scalar type="uint32_t" name="x" default="0"/>
          <Scalar type="uint32_t" name="y" default="0"/>
        </Properties>
        
        <State>
          <Scalar type="uint16_t" name="spinCount" default="0"/> 
          <Scalar type="uint16_t" name="updateCount" default="0"/> 
          <Scalar type="uint8_t" name="done" default="0"/>
        </State>
        
        <ReadyToSend><![CDATA[
          *readyToSend=0;
          
          if(deviceState->done)
          {
            device->thread->ctrlEnd = 1;
          } else if(deviceState->updateCount >= deviceState->maxUpdate) {
            *readyToSend = RTS_FLAG_finished;
          } else if(deviceState->spinCount >= deviceProperties->maxSpin) {
            *readyToSend = RTS_FLAG_out;
            deviceState->spinCount = 0;
            deviceState->updateCount++;
          } else {
            deviceState->spinCount++;
          }
          
        ]]></ReadyToSend>
        
        <OutputPin name="out" messageTypeId="update">
          <OnSend><![CDATA[
            message->t = deviceProperties->t;
          ]]></OnSend>
        </OutputPin>
        
        <OutputPin name="finished" messageTypeId="finished">
          <OnSend><![CDATA[
            message->fin = 1;
            message->finIdx = 0;
            message->t = deviceProperties->t;
            
            message->x = deviceProperties->x;
            message->y = deviceProperties->y;
          ]]></OnSend>
        </OutputPin>  
      </DeviceType>
    </DeviceTypes>
    
    <SupervisorDeviceType id="supervisorNode">
      <Code><![CDATA[
        #include <fstream>
        #include <iostream>
        #include <sstream>
        
        typedef struct{
          uint8_t fin;
          uint16_t finIdx;
          float t;
        }data_t;
        
        uint32_t finCount = 0;
        uint8_t sentDone = 0;
        uint8_t nodesDone = 0;
        
        data_t data[graphProperties->xSize][graphProperties->ySize];
      ]]></Code>
      
      <InputPin name="finished" messageTypeId="finished">
        <OnReceive><![CDATA[
          
          if((message->x >= graphProperties->xSize) || (message->y >= graphProperties->ySize))
          {
            //Something has gone horribly wrong and we have received a message for a node that can't exist.
          
          } else {
            if(message->fin && (message->finIdx > data[message->x][message->y].finIdx))
            {
              //It's a finished message that is newer than what we have.
              if(!data[message->x][message->y].fin){ finCount++; }; //Node is not already finished.
              
              data[message->x][message->y].fin = 1;
              data[message->x][message->y].finIdx = message->finIdx;
              data[message->x][message->y].t = message->t;
              
            } else if(message->finIdx >= data[message->x][message->y].finIdx) {
              //It's a not finished message cancelling the current or future finished message
              if(data[message->x][message->y].fin){ finCount--; }; //Node is already finished.
              
              data[message->x][message->y].fin = 0;
              data[message->x][message->y].finIdx = message->finIdx;
              data[message->x][message->y].t = message->t;
            } //Otherwise do nothing with the finish message as it is .
            
            
            if(finCount >= graphProperties->nodeCount) 
            {
              //All of the nodes have finished, do something.
              nodesDone = 1;
              
              if(!sentDone)
              {
                Supervisor::outputs[0]->(*OnSend)(outMsg, msgBuf, 1);
              } 
              
              //TODO: Send Data to MPI Land. Or write to file.
              
              //Wite data to CSV
              std::ofstream oFile;
              std::ostringstream ss;
              
              ss << "plate_" << graphProperties->xSize << "x" << graphProperties->ySize << "_out.csv";
              oFIie.open(ss.str());
              oFile.precision(2);
              
              oFile << "x, y, temp" << std::endl;
              
              for(int ix = 0; ix < graphProperties->xSize; ix++)
              {
                for(int iy = 0; iy < graphProperties->ySize; iy++)
                {
                  ofile << ix << ", " << iy << ", " << data[ix][iy].t << std::endl;
                }
              }
            }
          }
        ]]></OnReceive>
      </InputPin>
      
      <OutputPin name="done" messageTypeId="exit">
        <OnSend><![CDATA[
          sentDone = 1;
        ]]></OnSend>
      </OutputPin>
    </SupervisorDeviceType>
  </GraphType>