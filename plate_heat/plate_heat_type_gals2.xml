  <GraphType id="plate_heat">

    <SharedCode><![CDATA[
    #include <stdlib.h>
    #include <cmath>

    //#define LESSDEBUG
    //#define USEDEBUG
    //#define VERBOSEDEBUG

    int heartbeatIndex = 0;
    ]]></SharedCode>

    <Properties><![CDATA[
    uint32_t xSize = 10;
    uint32_t ySize = 10;
    uint32_t nodeCount = 100;
    ]]></Properties>

    <MessageTypes> 
    <MessageType id="heartbeat">
        <Message><![CDATA[
        ]]></Message>
    </MessageType>

    <MessageType id="update">
        <Message><![CDATA[
    float t;
    uint32_t iter;
    uint32_t fixed;
        ]]></Message>
    </MessageType>

    <MessageType id="finished">
        <Message><![CDATA[
    uint32_t x;
    uint32_t y;
    float t;
    uint32_t finIdx;
    uint32_t iter;
    uint32_t fin;
    float tF;
    float tN;
    float tE;
    float tS;
    float tW;
    uint32_t aCnt;
    uint32_t con;
        ]]></Message>
    </MessageType>
    </MessageTypes>

    <DeviceTypes>
    <DeviceType id="cell">
        <!-- This is a common-or-garden 2d cell, with no boundary stuff -->
        <Properties><![CDATA[
        uint32_t x;
        uint32_t y;
        uint32_t dummy = 0;
        float minChg = 0.5;
        //float minChg = 0.03125;
        uint32_t hcMax = 1000;       // Stolen in GALS for idle max
        ]]></Properties>

        <State><![CDATA[
        float t = 0.0;              // Our temperature
        uint32_t updated = 0;
        uint32_t fin = 0;            // Finished Flag
        uint32_t finSent = 0;        // Finished Sent Flag
        uint32_t finIdx = 0;        // Finished Index
        
        float tFixed = 0.0;
        float tData[4][2] = {{0.0,0.0},{0.0,0.0},{0.0,0.0},{0.0,0.0}};
        
        uint32_t stepRX[2] = {0,0};  // Bitmask for the inputs we have received each step 
        uint32_t connected = 0;     // Bitmask of connected pins, populated in Init
        uint32_t activeCount = 4;    // Convenience value for number of connected devices to save recalcs
        
        uint32_t iter = 0;          // Our iteration count
        uint32_t idleCnt = 0;
        ]]></State>

        <SharedCode><![CDATA[
        #include "tinsel.h"
        #include <stdint.h>
        
        #define NCON    0x01    // North connection flag
        #define ECON    0x02    // East connection flag
        #define SCON    0x04    // South connection flag
        #define WCON    0x08    // West connection flag

        #define FCON    0x10    // Fixed connection flag
        #define FMASK   0xf0    // Mask for which bits are fixed

        const float thirdMul = 1.0/3;

        void updateTemp(void* state, const void* props)
        {
            devtyp_cell_state_t* deviceState = static_cast<devtyp_cell_state_t*>(state);
            const devtyp_cell_props_t* deviceProperties = static_cast<const devtyp_cell_props_t*>(props);
            
            uint32_t step = (deviceState->iter & 0x01);
            uint32_t connected = deviceState->connected;
            
            float tCalc = deviceState->tFixed;
            if(connected & NCON)
            {
                tCalc += deviceState->tData[0][step];
            }
            if(connected & ECON)
            {
                tCalc += deviceState->tData[1][step];
            }
            if(connected & SCON)
            {
                tCalc += deviceState->tData[2][step];
            }
            if(connected & WCON)
            {
                tCalc += deviceState->tData[3][step];
            }

            switch(deviceState->activeCount){
                case 4:     tCalc = (tCalc*0.25);
                            break;
                case 3:     tCalc = (tCalc*thirdMul); //0x3eaaaaab);
                            break;
                case 2:     tCalc = (tCalc*0.5);
                            break;
                default:    break;   // 1 edge, no calc to do
            }

            //only update if the change in our temperature is large enough
            float tDiff = tCalc - deviceState->t;
            float tAbs = fabs(tDiff);
            if(tAbs >= (deviceProperties->minChg))
            {
                deviceState->fin = 0;
                deviceState->t = tCalc;
                deviceState->idleCnt = 0;
                deviceState->idleCnt = 0;
            }
            else
            {   // Increment the idle 
                deviceState->idleCnt++;
              
                if(deviceState->idleCnt >= deviceProperties->hcMax)
                { // Probably finished, mark it as so
                    deviceState->fin = 1;
                
                    // Stupid little overflow prevention
                    deviceState->idleCnt = deviceProperties->hcMax;
                }
            }
        }
        ]]></SharedCode>

        <ReadyToSend><![CDATA[  
        if((DEVICESTATE(fin) == 1) ^ (DEVICESTATE(finSent)==1)) {
            RTSSUP();
        }
        
        if(DEVICESTATE(updated)) {
            RTS(out);
        }
        ]]></ReadyToSend>
        
        <OnInit><![CDATA[
        // Start with all pins connected
        DEVICESTATE(connected) = (NCON | ECON | SCON | WCON);
        
        // Disable pins that are not connected.
        if(DEVICEPROPERTIES(x) == 0)
        {   // No West input
            DEVICESTATE(connected) &= ~(WCON);
            DEVICESTATE(activeCount)--;
        }
        else if(DEVICEPROPERTIES(x) == (GRAPHPROPERTIES(xSize) - 1))
        {   // No East input
            DEVICESTATE(connected) &= ~(ECON);
            DEVICESTATE(activeCount)--;
        }
        
        if(DEVICEPROPERTIES(y) == 0)
        {   // No South input
            DEVICESTATE(connected) &= ~(SCON);
            DEVICESTATE(activeCount)--;
        }
        else if(DEVICEPROPERTIES(y) == (GRAPHPROPERTIES(ySize) - 1))
        {   // No North input
            DEVICESTATE(connected) &= ~(NCON);
            DEVICESTATE(activeCount)--;
        }
        
        // This MUST be 0.0 at the start as we naively add FixedTemps to this
        // if we are connected to one (or possibly more) fixed devices.
        DEVICESTATE(tFixed) = 0.0;
        
        DEVICESTATE(stepRX[0]) = 0;
        DEVICESTATE(stepRX[1]) = 0;
        
        // Trigger to start the updates
        DEVICESTATE(updated) = 1;
        
        return 1;
        ]]></OnInit>

        <OnDeviceIdle><![CDATA[
        /* HACKS ABOUND: just to keep instrumentation ticking. */
        if(deviceInstance->deviceID == 0)
        {
            return(1);
        }
        ]]></OnDeviceIdle>

        <!-- Device State Handlers -->       
        <InputPin name="in" messageTypeId="update">
        <Properties><![CDATA[
        uint32_t dir;       // Edge direction. 0 = N, 1 = E, 2 = S, 3 = W
        ]]></Properties>
        
        <OnReceive><![CDATA[
        uint32_t dir = EDGEPROPERTIES(dir);
        
        
        if(DEVICESTATE(connected) & (0x01 << dir))
        {   // Sanity check to make sure pin connected.
            
            uint32_t idx = PKT(iter) & 0x01; // Get a 1 or 0.
            
            if(PKT(fixed) == 1)
            {   // Input edge is connected to a fixed device
#ifdef VERBOSEDEBUG
                switch(dir)
                {
                    case 0: handler_log(2,"NF_IN"); break;
                    case 1: handler_log(2,"EF_IN"); break;
                    case 2: handler_log(2,"SF_IN"); break;
                    case 3: handler_log(2,"WF_IN"); break;
                    default: handler_log(2,"?F_IN"); break;
                }
#endif
                
                // Store fixed temp and make sure directional is clear
                DEVICESTATE(tFixed) += PKT(t);                    
                DEVICESTATE(tData[dir][0]) = 0.0;
                DEVICESTATE(tData[dir][1]) = 0.0;
                
                // Update connection bitmask
                DEVICESTATE(connected) &= ~(0x01 << dir);
                DEVICESTATE(connected) |= FCON;
                
                DEVICESTATE(stepRX[0]) |= FCON;
                DEVICESTATE(stepRX[1]) |= FCON;
            }
            else
            {   // "standard" update
#ifdef VERBOSEDEBUG
                switch(dir)
                {
                    case 0: handler_log(2,"N_IN"); break;
                    case 1: handler_log(2,"E_IN"); break;
                    case 2: handler_log(2,"S_IN"); break;
                    case 3: handler_log(2,"W_IN"); break;
                    default: handler_log(2,"?_IN"); break;
                }
#endif
                deviceState->tData[dir][idx] = PKT(t);
                deviceState->stepRX[idx] |= (0x01 << dir);
            }
            
            if((!deviceState->updated) && 
                (deviceState->stepRX[DEVICESTATE(iter) & 0x01] == DEVICESTATE(connected)))
            {   // Received updates for all in step
#ifdef VERBOSEDEBUG
                switch(dir)
                {
                    case 0: handler_log(2,"N_UP"); break;
                    case 1: handler_log(2,"E_UP"); break;
                    case 2: handler_log(2,"S_UP"); break;
                    case 3: handler_log(2,"W_UP"); break;
                    default: handler_log(2,"?_UP"); break;
                }
#endif
                updateTemp(deviceState, deviceProperties);
            
                deviceState->updated = 1;
            }
            
        
        }
        else
        { // Disconnected pin, should not get here
            switch(dir)
            {
                case 0: handler_log(2,"N_BARF"); break;
                case 1: handler_log(2,"E_BARF"); break;
                case 2: handler_log(2,"S_BARF"); break;
                case 3: handler_log(2,"W_BARF"); break;
                default: handler_log(2,"?_BARF"); break;
            }
        }
        ]]></OnReceive>
        </InputPin>

        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
#ifdef VERBOSEDEBUG
        handler_log(2,"C_OUT");
#endif
        // Reset the Step bitmask for the pin.
        DEVICESTATE(stepRX[(DEVICESTATE(iter) & 0x01)]) = (DEVICESTATE(connected) & FMASK);
        
        DEVICESTATE(iter)++;
        
        PKT(t) = DEVICESTATE(t);
        PKT(iter) = DEVICESTATE(iter);
        PKT(fixed) = 0;
        DEVICESTATE(updated) = 0;
        
        
        if(deviceState->stepRX[DEVICESTATE(iter) & 0x01] == DEVICESTATE(connected))
        {   // Received updates for all in step
#ifdef VERBOSEDEBUG
            switch(dir)
            {
                case 0: handler_log(2,"N_UP"); break;
                case 1: handler_log(2,"E_UP"); break;
                case 2: handler_log(2,"S_UP"); break;
                case 3: handler_log(2,"W_UP"); break;
                default: handler_log(2,"?_UP"); break;
            }
#endif
            updateTemp(deviceState, deviceProperties);
        
            deviceState->updated = 1;
        }
        
        ]]></OnSend>
        </OutputPin>
        
        <!-- Experiment Termination Handlers -->
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
        //It's a toggle.
        if(DEVICESTATE(fin) && !DEVICESTATE(finSent)) //Finished, but have not sent
        {
            DEVICESTATE(finIdx)++;    //Increment BEFORE use!!!
            DEVICESTATE(finSent) = 1;
            PKT(fin) = 1;
        }
        else if(!DEVICESTATE(fin) && DEVICESTATE(finSent)) //Sent but finished cancelled
        { 
            DEVICESTATE(finSent) = 0;
            PKT(fin) = 0;
        }
        else    // This is an echo packet
        {
            PKT(fin) = UINT32_MAX;
        }
        PKT(finIdx) = DEVICESTATE(finIdx);
        PKT(t) = DEVICESTATE(t);

        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
            
        PKT(iter) = DEVICESTATE(iter);
        
        uint32_t idx = DEVICESTATE(iter) & 0x01; // Get a 1 or 0.
        
        PKT(tF) = DEVICESTATE(tFixed);
        PKT(tN) = deviceState->tData[0][idx];
        PKT(tE) = deviceState->tData[1][idx];
        PKT(tS) = deviceState->tData[2][idx];
        PKT(tW) = deviceState->tData[3][idx];
        PKT(aCnt) = DEVICESTATE(activeCount);
        PKT(con) = DEVICESTATE(connected);
        ]]></OnSend>
        </SupervisorOutPin>
    </DeviceType>

    <DeviceType id="fixedNode">
        <Properties><![CDATA[
        float t = 21.0;
        uint32_t x = 0;
        uint32_t y = 0;
        uint32_t maxUpdate = 1;
        ]]></Properties>

        <State><![CDATA[
        uint32_t updateCount = 0;
        uint32_t done = 0;
        uint32_t finSent = 0;
        uint32_t updated = 0;
        ]]></State>
        
        <SharedCode><![CDATA[
          
        ]]></SharedCode>
        
        <ReadyToSend><![CDATA[
        if(DEVICESTATE(finSent) < 1){
            if(DEVICESTATE(updateCount) < DEVICEPROPERTIES(maxUpdate)) {
                RTS(out);
            } else {
                RTSSUP();
            }
        }
        ]]></ReadyToSend>
        
        <OnInit><![CDATA[
        return 1;       // Trigger RTS
        ]]></OnInit>
        
        <OutputPin name="out" messageTypeId="update">
        <OnSend><![CDATA[
#ifdef VERBOSEDEBUG
        handler_log(2,"F_OUT");
#endif
        PKT(t) = DEVICEPROPERTIES(t);
        PKT(iter) = 1;
        PKT(fixed) = 1;
        
        DEVICESTATE(updateCount)++;
        ]]></OnSend>
        </OutputPin>
        
        <SupervisorOutPin messageTypeId="finished">
        <OnSend><![CDATA[
        PKT(fin) = 1;
        PKT(finIdx) = 1;
        PKT(t) = DEVICEPROPERTIES(t);
        
        PKT(x) = DEVICEPROPERTIES(x);
        PKT(y) = DEVICEPROPERTIES(y);
        
        PKT(iter) = 1;
        
        DEVICESTATE(finSent) = 1;
        
#ifdef USEDEBUG
        handler_log(2,"F_FIN_SENT");
#endif
        ]]></OnSend>
        </SupervisorOutPin>
        
        <OnDeviceIdle><![CDATA[
        if(DEVICESTATE(finSent) < 1) return 1;
        // Nothing to do
        ]]></OnDeviceIdle>
    </DeviceType>
      
    <SupervisorType id="supervisorNode">
        <Code><![CDATA[
        #include <fstream>
        #include <iostream>
        #include <sstream>
        #include <string>
        #include <cstdio>
        #include <iomanip>
        #include <cmath>
        #include <vector>
        
        #define USEDEBUG
        //#define VERBOSEDEBUG
        
        #ifdef USEDEBUG
          #define DEBUG_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define DEBUG_PRINT(x)
        #endif
        
        #ifdef VERBOSEDEBUG
          #define VERBOSE_PRINT(x) std::cout << std::setprecision(2) << x << std::endl
        #else
          #define VERBOSE_PRINT(x)
        #endif
        
        typedef struct nodeDataType
        {
            uint32_t fin = 0;
            uint32_t finIdx = 0;
            float t = 0.0;
            uint32_t iter = 0;
        } nodeData_t;

        ]]></Code>
        
        <Properties><![CDATA[
        uint32_t xSize = XSIZE_DEF;
        uint32_t ySize = YSIZE_DEF;
        uint32_t nodeCount = NODE_DEF;
        uint32_t loopMax = 1000;
        ]]></Properties>
            
        <State><![CDATA[
        std::vector<nodeData_t> data = std::vector<nodeData_t>(NODE_DEF);
        uint32_t loopCount = 0;
        
        uint32_t finCount = 0;
        uint32_t finRec = 0;
        
        time_t tStart;
        time_t tEnd;
        ]]></State>
        

        <!-- XSIZE_DEF, YSIZE_DEF and NODE_DEF are replaced by the generator. -->
        <!-- This is a complete hack and needs some thought in how to parameterise. -->
        <SupervisorInPin id="finished" messageTypeId="finished">
          <OnReceive><![CDATA[
            VERBOSE_PRINT("MSG:");
            if((PKT(x) >= SUPPROPERTIES(xSize)) || (PKT(y) >= SUPPROPERTIES(ySize)))
            {
              //Something has gone horribly wrong and we have received a message for a node that can't exist.
              DEBUG_PRINT("ERR_MSG_CELL_NE");
            }
            else if(PKT(fin) == UINT32_MAX)
            {   // Echo packet!
                //TODO: do something
            } else {
              uint64_t loc = (PKT(x) * SUPPROPERTIES(xSize)) + PKT(y);
              
              if(PKT(fin) && (PKT(finIdx) > SUPSTATE(data[loc].finIdx)))
              {
                //It's a finished message that is newer than what we have.
                VERBOSE_PRINT("\tFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx) << " T:"  << PKT(t));

                if(SUPSTATE(finRec) == 0)
                {
                  //First rec, start timing.
                  SUPSTATE(finRec) = 1;
                  SUPSTATE(tStart) = std::time(NULL);
                  std::ofstream tFile;
                  std::ostringstream sst;
                  sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                  tFile.open(sst.str());
                  tFile << PKT(x) << "," << PKT(y) << ":" << SUPSTATE(tStart) << std::endl;
                  tFile.close();
                }

                if(!SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)++; }; //Node is not already finished.

                SUPSTATE(data[loc].fin) = 1;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                SUPSTATE(data[loc].iter) = PKT(iter);
                

              } else if(!(PKT(fin)) && PKT(finIdx) >= SUPSTATE(data[loc].finIdx)) {
                //It's a not finished message cancelling the current or future finished message
                VERBOSE_PRINT("\tNFIN:" << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
                if(SUPSTATE(data[loc].fin)){ SUPSTATE(finCount)--; }; //Node is already finished.

                SUPSTATE(data[loc].fin) = 0;
                SUPSTATE(data[loc].finIdx) = PKT(finIdx);
                SUPSTATE(data[loc].t) = PKT(t);
                SUPSTATE(data[loc].iter) = PKT(iter);
                
              } else {//Otherwise do nothing with the finish message as it is a duplicate.
                VERBOSE_PRINT("\tIGNORED:" << PKT(fin) << " " << PKT(x) << "," << PKT(y) << " IDX:" << PKT(finIdx));
              }
              
              DEBUG_PRINT("\tFINCOUNT:" << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount) << " " << PKT(x) << "," << PKT(y));
              
              /*
              //Periodic node count updates
              if(SUPSTATE(loopCount) == 0){
                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount) << "/" << SUPPROPERTIES(nodeCount));
                
                char buffer [100];
                int cx;

                cx = snprintf (buffer, 100, "NodesDone:%d/%d", SUPSTATE(finCount), SUPPROPERTIES(nodeCount));

                if (cx>=0 && cx<100){
                    //handler_log(2,buffer);
                }
                SUPSTATE(loopCount) = SUPPROPERTIES(loopMax);
              }
              SUPSTATE(loopCount)--;
              */

              if(SUPSTATE(finCount) >= SUPPROPERTIES(nodeCount))
              { //All of the nodes have finished, do something.
              
                //Last rec, Finish timing.
                SUPSTATE(tEnd) = std::time(NULL);
                std::ofstream tFile;
                std::ostringstream sst;
                sst << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_time.txt";
                tFile.open(sst.str(), std::ofstream::out | std::ofstream::app);
                tFile << PKT(x) << "," << PKT(y) << ":" << SUPSTATE(tEnd) << "\tElapsed(s): ";
                tFile << (SUPSTATE(tEnd) - SUPSTATE(tStart))<< std::endl;
                tFile.close();

                DEBUG_PRINT("\tNODES_DONE: " << SUPSTATE(finCount));
                //handler_log(2, "ALL NODES_DONE");

                //TODO: Send Data to MPI Land. Or write to file.

                //Wite data to CSV
                std::ofstream oFile;
                std::ostringstream ss;

                ss << "plate_" << SUPPROPERTIES(xSize) << "x" << SUPPROPERTIES(ySize) << "_out.csv";
                oFile.open(ss.str());
                DEBUG_PRINT("\tOFILE_OPEN: " << ss.str()) ;
                //oFile.precision(2);
                oFile << std::fixed << std::setprecision(2);

                oFile << "x, y, temp, finCount, outCount, ";
                oFile << "inCount, nInCount, eInCount, sInCount, wInCount";
                oFile << std::endl;
                
                DEBUG_PRINT("\tRESULTS_WRITE");

                for(unsigned int ix = 0; ix < SUPPROPERTIES(xSize); ix++)
                {
                  loc = ix*SUPPROPERTIES(xSize);
                  for(unsigned int iy = 0; iy < SUPPROPERTIES(ySize); iy++)
                  {
                    oFile << ix << ", " << iy << ", ";
                    oFile << SUPSTATE(data[loc].t)  << ", ";
                    oFile << SUPSTATE(data[loc].finIdx)  << ", ";
                    
                    oFile << SUPSTATE(data[loc].iter)  << ", ";
                    
                    oFile << "0, 0, 0, 0, 0" << std::endl;
                    loc++;
                  }
                }
                DEBUG_PRINT("\tRESULTS_WRITTEN");
                
                oFile.close();
                DEBUG_PRINT("\tOFILE_CLOSE");
                DEBUG_PRINT("\tPROBLEM COMPLETE in " << (
                SUPSTATE(tEnd) - SUPSTATE(tStart)) << " seconds");
              }
            }
          ]]></OnReceive>
        </SupervisorInPin>
    </SupervisorType>
    </DeviceTypes>
  </GraphType>