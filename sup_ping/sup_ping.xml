<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
  <GraphType id="ping_pong_t">
    <SharedCode><![CDATA[
    #include <stdlib.h>
    #include <cmath>
    #include "tinsel.h"
    
    //#define USEDEBUG
    //#define VERBOSEDEBUG
    ]]></SharedCode>

    <MessageTypes>    
      <MessageType id="ping">
        <Message>
          <Scalar type="uint32_t" name="pad"/>
          <Scalar type="uint32_t" name="pad2"/>
        </Message>
      </MessageType>
      
      <MessageType id="pong">
        <Message>
          <Scalar type="uint32_t" name="idx"/>
          <Scalar type="uint32_t" name="tgtHW"/>
          <Scalar type="uint32_t" name="tgtSW"/>
          <Scalar type="uint32_t" name="tgtPin"/>
        </Message>
      </MessageType>

    </MessageTypes>

    <DeviceTypes>
      <DeviceType id="A">
        <Properties>
          <Scalar type="uint32_t" name="idx" default="0"/>
        </Properties>

        <State>
          <Scalar type="uint32_t" name="ping" default="0"/>
          <Scalar type="uint32_t" name="pong" default="0"/>
        </State>

        <SharedCode><![CDATA[

        ]]></SharedCode>

        <ReadyToSend><![CDATA[
          *readyToSend = 0;
          
          
          if(deviceState->ping == 0) 
          {
            *readyToSend |= RTS_FLAG_ping;
          }
          else if(deviceState->pong == 0) 
          {
            *readyToSend |= RTS_FLAG_pong;
          }          
        ]]></ReadyToSend>

        <OnCompute><![CDATA[
          if(deviceState->ping == 0){
            return(1);
          }
          return(0); //GOTCHA: Surely this should be defualt behaviour?
        ]]></OnCompute>

        <!-- Device State Handlers -->
        <InputPin name="pingIn" messageTypeId="ping">
          <OnReceive><![CDATA[
    #ifdef VERBOSEDEBUG
            handler_log(2,"P_IN");
    #endif
            // Dummy Input Pin as it seems to be needed...
          ]]></OnReceive>
        </InputPin>
        
        
        <OutputPin name="ping" messageTypeId="ping">
          <OnSend><![CDATA[
    #ifdef VERBOSEDEBUG
            handler_log(2,"P_OUT");
    #endif
            deviceState->ping = 1;
            message->pad = 0xF0F0F0F0;
            message->pad2 = 0xF0F0F0F0;
          ]]></OnSend>
        </OutputPin>
        
        <OutputPin name="pong" messageTypeId="pong">
          <OnSend><![CDATA[
    #ifdef USEDEBUG
            handler_log(2,"PONG");
    #endif
            deviceState->pong = 1;
            
            message->idx = deviceProperties->idx;
            //message->tgtHW = deviceInstance->outputPins[0].targets[0].hwAddr;
            //message->tgtSW = deviceInstance->outputPins[0].targets[0].swAddr;
            //message->tgtPin = deviceInstance->outputPins[0].targets[0].pinAddr;
            
            message->tgtHW = deviceInstance->outputPins[0].targets[0].tgt;
            message->tgtSW = deviceInstance->outputPins[0].targets[0].tgtPin;
            message->tgtPin = deviceInstance->outputPins[0].targets[0].tgtEdge;
          ]]></OnSend>
        </OutputPin>
      </DeviceType>
      
      
      <DeviceType id="B">
        <Properties>
          <Scalar type="uint32_t" name="idx" default="100"/>
        </Properties>

        <State>
          <Scalar type="uint32_t" name="ping" default="0"/>
          <Scalar type="uint32_t" name="pong" default="0"/>
        </State>

        <SharedCode><![CDATA[
        
        ]]></SharedCode>

        <ReadyToSend><![CDATA[
          *readyToSend = 0;
          
          if((deviceState->ping == 1) && (deviceState->pong == 0)) {
            *readyToSend |= RTS_FLAG_pong;
          }
          
        ]]></ReadyToSend>

        <OnCompute><![CDATA[
          return(0);
        ]]></OnCompute>

        <!-- Device State Handlers -->
        <InputPin name="ping" messageTypeId="ping">
          <OnReceive><![CDATA[
    #ifdef VERBOSEDEBUG
            handler_log(2,"P_IN");
    #endif
            deviceState->ping = 1;
          ]]></OnReceive>
        </InputPin>
        
        <OutputPin name="pingOut" messageTypeId="ping">
          <OnSend><![CDATA[
    #ifdef VERBOSEDEBUG
            handler_log(2,"P_OUT");
    #endif
            // Dummy Output Pin as it seems to be needed...
            message->pad = 0xF0F0F0F0;
            message->pad2 = 0xF0F0F0F0;
          ]]></OnSend>
        </OutputPin>
        
        <OutputPin name="pong" messageTypeId="pong">
          <OnSend><![CDATA[
    #ifdef USEDEBUG
            handler_log(2,"PONG");
    #endif
            deviceState->pong = 1;
            
            message->idx = deviceProperties->idx;
            message->tgtHW = tinselId();
            
            message->tgtSW = 0xF0F0F0F0;
            message->tgtPin = 0xFF0FF0FF;
          ]]></OnSend>
        </OutputPin>
      </DeviceType>
      
      
      
      <SupervisorDeviceType id="supervisorNode">
        <Code><![CDATA[
          #include <fstream>
          #include <iostream>
          #include <sstream>
          #include <string>
          #include <cstdio>
          #include <cmath>
          
          #define USEDEBUG
          #define VERBOSEDEBUG
          
          #ifdef USEDEBUG
            #define DEBUG_PRINT(x) std::cout << x << std::endl
          #else
            #define DEBUG_PRINT(x) 
          #endif 
          
          #ifdef VERBOSEDEBUG
            #define VERBOSE_PRINT(x) std::cout << x << std::endl
          #else
            #define VERBOSE_PRINT(x) 
          #endif 
        ]]></Code>

        <InputPin name="pong" messageTypeId="pong">
          <Properties>
            <Scalar type="uint32_t" name="idx"/>
          </Properties>
          
          <State>
            <Scalar type="uint32_t" name="idx"/>
          </State>
          
          <OnReceive><![CDATA[
            
            //TODO: Send Data to MPI Land. Or write to file.
            
            std::cout << "Idx: " << message->idx << "\t";
            std::cout << "HW: " << message->tgtHW << "\t";
            std::cout << "SW: " << message->tgtSW << "\t";
            std::cout << "Pin: " << message->tgtPin << "\t";
            std::cout << std::endl;
            
          ]]></OnReceive>
        </InputPin>
      </SupervisorDeviceType>
    </DeviceTypes>
  </GraphType>

  <GraphInstance id="ping_pong" graphTypeId="ping_pong_t">
    <DeviceInstances>
      <DevI id="a_0" type="A"><P>"idx": 0</P></DevI>
      <DevI id="b_10" type="B"><P>"idx": 166</P></DevI>
      <DevI id="b_20" type="B"><P>"idx": 266</P></DevI>
      <DevI id="b_0" type="B"><P>"idx": 66</P></DevI>
    </DeviceInstances>
    
    <EdgeInstances>
      <EdgeI path="b_0:ping-a_0:ping"/>
      
      <EdgeI path=":pong-a_0:pong"/>
      <EdgeI path=":pong-b_0:pong"/>
    </EdgeInstances>
  </GraphInstance>
</Graphs>
