<?xml version="1.0"?>
<Graphs xmlns="" appname="NetStress">
  <GraphType id="net_stress">
    <SharedCode><![CDATA[
      #include <stdlib.h>
      #include <cmath>
    ]]></SharedCode>
    
    
    <MessageTypes>
      <MessageType id="spam">
        <Message><![CDATA[
        uint32_t blockCnt;
        uint32_t rtsRem;
        ]]></Message>
      </MessageType>
      <MessageType id="update">
        <Message><![CDATA[
        uint32_t idx;
        uint32_t spamCnt;
        uint32_t cycles;
        uint32_t blockCnt;
        uint32_t rtsRem;
        ]]></Message>
      </MessageType>
    </MessageTypes>
    
    <DeviceTypes>
      <DeviceType id="spammer">
        <Properties><![CDATA[
            uint32_t active = 0;
            uint32_t spamCheck = 10000;
        ]]></Properties>
        <State><![CDATA[
            uint32_t spamCnt = 0;
            uint32_t refractory = 0;
            uint32_t refractoryEnter = 0;
            uint32_t refractoryExit = 0;
        ]]></State>
        
        <SharedCode><![CDATA[
            #include "tinsel.h"

            // ~2 seconds to allow things to settle
            const uint32_t refractoryPeriod = (TinselClockFreq * 2000000);

            // ~5 seconds of spam
            const uint32_t spamPeriod = (TinselClockFreq * 5000000);   
        ]]></SharedCode>
                  
        <ReadyToSend><![CDATA[  
            // We ALWAYS send if we are active and not in a refractory period
            if((DEVICEPROPERTIES(active) > 0) && (DEVICESTATE(refractory) == 0))
            {
            RTS(spamOut);
            }
        ]]></ReadyToSend>
        
        <OnDeviceIdle><![CDATA[
            if(DEVICEPROPERTIES(active) > 0)
            {
            // Check to see if the refractory period is over
            uint32_t cycles = tinselCycleCount();
            if((cycles - deviceState->refractoryEnter) 
                > refractoryPeriod)
            {
              deviceState->refractory = 0;
              deviceState->refractoryExit = cycles;
            }

            return 1;
            } else {
            return 0;
            }
        ]]></OnDeviceIdle>
        
        <OutputPin name="spamOut" messageTypeId="spam">
          <OnSend><![CDATA[   
            /* HACKS ABOUND: we burgle ThreadContext for giggles. */
            
            // Get the blocked count. We have to get to the ThreadContext 
            // through the backpointer in the deviceInstance.
            PKT(blockCnt) = deviceInstance->thread->blockCount;
            
            
            // Get the RTS buffer count
            PKT(rtsRem) = (deviceInstance->thread->rtsEnd >=
                                           deviceInstance->thread->rtsStart)   ?
                          (((deviceInstance->thread->rtsBuffSize - 
                                    deviceInstance->thread->rtsEnd) +
                                    deviceInstance->thread->rtsStart))         :
                          (deviceInstance->thread->rtsStart - 
                                    deviceInstance->thread->rtsEnd);
            
            if(DEVICESTATE(spamCnt)++ > DEVICEPROPERTIES(spamCheck))
            {
              DEVICESTATE(spamCnt) = 0;
              
              // Check to see if we need to enter a refractory period
              uint32_t cycles = tinselCycleCount();
              if((cycles - DEVICESTATE(refractoryExit)) 
                  > spamPeriod)
              {
                DEVICESTATE(refractory) = 1;
                DEVICESTATE(refractoryEnter) = cycles;
              }
            }
          ]]></OnSend>
        </OutputPin>
      </DeviceType>
           
      <DeviceType id="receiver">        
        <State><![CDATA[
            uint32_t active = 0;
            uint32_t idx = 1;
            uint32_t lastCycles = 0;
            uint32_t spamCnt = 0;
            uint32_t maxBlockCnt = 0;
            uint32_t minRTSCnt = UINT32_MAX;
        ]]></State>
        
        <SharedCode><![CDATA[
            #include "tinsel.h"
            
            // ~1 seconds for sending updates to supervisor
            const uint32_t cyclePeriod = (TinselClockFreq * 1000000);
        ]]></SharedCode>
        
        <ReadyToSend><![CDATA[  
          // We never send anything, except a ~1Hz update to the supervisor
          if((tinselCycleCount() - DEVICESTATE(lastCycles)) 
                > cyclePeriod)
          {
            RTSSUP();
          }
        ]]></ReadyToSend>
        
        <OnDeviceIdle><![CDATA[
          return 1;
        ]]></OnDeviceIdle>
        
        <InputPin name="spamIn" messageTypeId="spam">
          <OnReceive><![CDATA[
            // Receive some spam
            DEVICESTATE(spamCnt)++;
            if(PKT(blockCnt) > DEVICESTATE(maxBlockCnt))
            {
              DEVICESTATE(maxBlockCnt) = PKT(blockCnt);
            }
            
            if(PKT(rtsRem) < DEVICESTATE(minRTSCnt))
            {
              DEVICESTATE(minRTSCnt) = PKT(rtsRem);
            }
            
          ]]></OnReceive>
        </InputPin>
        
        <SupervisorOutPin messageTypeId="update">
          <OnSend><![CDATA[
            uint32_t cycles = tinselCycleCount();
            
            PKT(idx) = DEVICESTATE(idx)++;
            PKT(spamCnt) = DEVICESTATE(spamCnt);
            PKT(cycles) = cycles - DEVICESTATE(lastCycles);
            PKT(blockCnt) = DEVICESTATE(maxBlockCnt);
            PKT(rtsRem) = DEVICESTATE(minRTSCnt);
            
            // Update cycle count
            DEVICESTATE(lastCycles) = cycles;
            
            DEVICESTATE(maxBlockCnt) = 0;
            DEVICESTATE(minRTSCnt) = UINT32_MAX;
          ]]></OnSend>
        </SupervisorOutPin>
      </DeviceType>
      
      <SupervisorType id="supervisorNode">
        <State><![CDATA[
          uint64_t spamCnt = 0;
          uint32_t active = 0;
          double totalTime = 0;
        ]]></State>
          
        <Code><![CDATA[
          #include <fstream>
          #include <iostream>
          #include <sstream>
          #include <string>
          #include <cstdio>
          #include <iomanip>
          #include <cmath>
          
          // ~1 second
          const uint32_t cyclesPerSec = (TinselClockFreq * 1000000);
            
          std::ofstream oFile;
        ]]></Code>
        
        <OnInit><![CDATA[
            oFile.open("spammer_out.csv"); 
            oFile << "idx,time,deltaT,cycles,spamCnt,";
            oFile << "totalSpam,blockCnt,RTSSlotsLeft" << std::endl;
            oFile << "0,0,0,0,0,0,0,0" << std::endl;
            SUPSTATE(active) = 1;
        ]]></OnInit>
      
        <SupervisorInPin id="updateIn" messageTypeId="update">
          <OnReceive><![CDATA[           
            
            double deltaT = static_cast<double>(PKT(cycles))/cyclesPerSec;
            SUPSTATE(totalTime) += deltaT;
            
            SUPSTATE(spamCnt) += PKT(spamCnt);
            
            oFile << PKT(idx) << ",";               // idx
            oFile << SUPSTATE(totalTime) << ",";    // time
            oFile << deltaT << ",";                 // deltaT
            oFile << PKT(cycles) << ",";            // cycles
            oFile << PKT(spamCnt) << ",";           // spamCnt
            oFile << SUPSTATE(spamCnt) << ",";      // totalSpam
            oFile << PKT(blockCnt) << ",";          // blockCnt
            oFile << PKT(rtsRem) << ",";            // RTS Buffer space left
            oFile << std::endl;
            
            std::cout << "IDX: " << PKT(idx);
            std::cout << "\t Spam: " << PKT(spamCnt);
            std::cout << "\t Total Spam: " << SUPSTATE(spamCnt);
            std::cout << "\t Blocked: " << PKT(blockCnt);
            std::cout << "\t RTS Rem: " << PKT(rtsRem);
            std::cout << std::endl;
            
          ]]></OnReceive>
        </SupervisorInPin>
        
        <OnStop><![CDATA[
            oFile.close();
        ]]></OnStop>
        
      </SupervisorType>
      
    </DeviceTypes>
   </GraphType>
  <GraphInstance id="netstress_2board" graphTypeId="net_stress">
    <DeviceInstances>
      <DevI id="s0000" type="spammer" P="{1}"/>
      <DevI id="s0001" type="spammer"/>
      <DevI id="s0002" type="spammer"/>
      <DevI id="s0003" type="spammer"/>
      <DevI id="s0004" type="spammer"/>
      <DevI id="s0005" type="spammer"/>
      <DevI id="s0006" type="spammer"/>
      <DevI id="s0007" type="spammer"/>
      <DevI id="s0008" type="spammer"/>
      <DevI id="s0009" type="spammer"/>
      <DevI id="s0010" type="spammer"/>
      <DevI id="s0011" type="spammer"/>
      <DevI id="s0012" type="spammer"/>
      <DevI id="s0013" type="spammer"/>
      <DevI id="s0014" type="spammer"/>
      <DevI id="s0015" type="spammer"/>
      <DevI id="s0016" type="spammer"/>
      <DevI id="s0017" type="spammer"/>
      <DevI id="s0018" type="spammer"/>
      <DevI id="s0019" type="spammer"/>
      <DevI id="s0020" type="spammer"/>
      <DevI id="s0021" type="spammer"/>
      <DevI id="s0022" type="spammer"/>
      <DevI id="s0023" type="spammer"/>
      <DevI id="s0024" type="spammer"/>
      <DevI id="s0025" type="spammer"/>
      <DevI id="s0026" type="spammer"/>
      <DevI id="s0027" type="spammer"/>
      <DevI id="s0028" type="spammer"/>
      <DevI id="s0029" type="spammer"/>
      <DevI id="s0030" type="spammer"/>
      <DevI id="s0031" type="spammer"/>
      <DevI id="s0032" type="spammer"/>
      <DevI id="s0033" type="spammer"/>
      <DevI id="s0034" type="spammer"/>
      <DevI id="s0035" type="spammer"/>
      <DevI id="s0036" type="spammer"/>
      <DevI id="s0037" type="spammer"/>
      <DevI id="s0038" type="spammer"/>
      <DevI id="s0039" type="spammer"/>
      <DevI id="s0040" type="spammer"/>
      <DevI id="s0041" type="spammer"/>
      <DevI id="s0042" type="spammer"/>
      <DevI id="s0043" type="spammer"/>
      <DevI id="s0044" type="spammer"/>
      <DevI id="s0045" type="spammer"/>
      <DevI id="s0046" type="spammer"/>
      <DevI id="s0047" type="spammer"/>
      <DevI id="s0048" type="spammer"/>
      <DevI id="s0049" type="spammer"/>
      <DevI id="s0050" type="spammer"/>
      <DevI id="s0051" type="spammer"/>
      <DevI id="s0052" type="spammer"/>
      <DevI id="s0053" type="spammer"/>
      <DevI id="s0054" type="spammer"/>
      <DevI id="s0055" type="spammer"/>
      <DevI id="s0056" type="spammer"/>
      <DevI id="s0057" type="spammer"/>
      <DevI id="s0058" type="spammer"/>
      <DevI id="s0059" type="spammer"/>
      <DevI id="s0060" type="spammer"/>
      <DevI id="s0061" type="spammer"/>
      <DevI id="s0062" type="spammer"/>
      <DevI id="s0063" type="spammer"/>
      <DevI id="s0064" type="spammer"/>
      <DevI id="s0065" type="spammer"/>
      <DevI id="s0066" type="spammer"/>
      <DevI id="s0067" type="spammer"/>
      <DevI id="s0068" type="spammer"/>
      <DevI id="s0069" type="spammer"/>
      <DevI id="s0070" type="spammer"/>
      <DevI id="s0071" type="spammer"/>
      <DevI id="s0072" type="spammer"/>
      <DevI id="s0073" type="spammer"/>
      <DevI id="s0074" type="spammer"/>
      <DevI id="s0075" type="spammer"/>
      <DevI id="s0076" type="spammer"/>
      <DevI id="s0077" type="spammer"/>
      <DevI id="s0078" type="spammer"/>
      <DevI id="s0079" type="spammer"/>
      <DevI id="s0080" type="spammer"/>
      <DevI id="s0081" type="spammer"/>
      <DevI id="s0082" type="spammer"/>
      <DevI id="s0083" type="spammer"/>
      <DevI id="s0084" type="spammer"/>
      <DevI id="s0085" type="spammer"/>
      <DevI id="s0086" type="spammer"/>
      <DevI id="s0087" type="spammer"/>
      <DevI id="s0088" type="spammer"/>
      <DevI id="s0089" type="spammer"/>
      <DevI id="s0090" type="spammer"/>
      <DevI id="s0091" type="spammer"/>
      <DevI id="s0092" type="spammer"/>
      <DevI id="s0093" type="spammer"/>
      <DevI id="s0094" type="spammer"/>
      <DevI id="s0095" type="spammer"/>
      <DevI id="s0096" type="spammer"/>
      <DevI id="s0097" type="spammer"/>
      <DevI id="s0098" type="spammer"/>
      <DevI id="s0099" type="spammer"/>
      <DevI id="s0100" type="spammer"/>
      <DevI id="s0101" type="spammer"/>
      <DevI id="s0102" type="spammer"/>
      <DevI id="s0103" type="spammer"/>
      <DevI id="s0104" type="spammer"/>
      <DevI id="s0105" type="spammer"/>
      <DevI id="s0106" type="spammer"/>
      <DevI id="s0107" type="spammer"/>
      <DevI id="s0108" type="spammer"/>
      <DevI id="s0109" type="spammer"/>
      <DevI id="s0110" type="spammer"/>
      <DevI id="s0111" type="spammer"/>
      <DevI id="s0112" type="spammer"/>
      <DevI id="s0113" type="spammer"/>
      <DevI id="s0114" type="spammer"/>
      <DevI id="s0115" type="spammer"/>
      <DevI id="s0116" type="spammer"/>
      <DevI id="s0117" type="spammer"/>
      <DevI id="s0118" type="spammer"/>
      <DevI id="s0119" type="spammer"/>
      <DevI id="s0120" type="spammer"/>
      <DevI id="s0121" type="spammer"/>
      <DevI id="s0122" type="spammer"/>
      <DevI id="s0123" type="spammer"/>
      <DevI id="s0124" type="spammer"/>
      <DevI id="s0125" type="spammer"/>
      <DevI id="s0126" type="spammer"/>
      <DevI id="s0127" type="spammer"/>
      <DevI id="s0128" type="spammer"/>
      <DevI id="s0129" type="spammer"/>
      <DevI id="s0130" type="spammer"/>
      <DevI id="s0131" type="spammer"/>
      <DevI id="s0132" type="spammer"/>
      <DevI id="s0133" type="spammer"/>
      <DevI id="s0134" type="spammer"/>
      <DevI id="s0135" type="spammer"/>
      <DevI id="s0136" type="spammer"/>
      <DevI id="s0137" type="spammer"/>
      <DevI id="s0138" type="spammer"/>
      <DevI id="s0139" type="spammer"/>
      <DevI id="s0140" type="spammer"/>
      <DevI id="s0141" type="spammer"/>
      <DevI id="s0142" type="spammer"/>
      <DevI id="s0143" type="spammer"/>
      <DevI id="s0144" type="spammer"/>
      <DevI id="s0145" type="spammer"/>
      <DevI id="s0146" type="spammer"/>
      <DevI id="s0147" type="spammer"/>
      <DevI id="s0148" type="spammer"/>
      <DevI id="s0149" type="spammer"/>
      <DevI id="s0150" type="spammer"/>
      <DevI id="s0151" type="spammer"/>
      <DevI id="s0152" type="spammer"/>
      <DevI id="s0153" type="spammer"/>
      <DevI id="s0154" type="spammer"/>
      <DevI id="s0155" type="spammer"/>
      <DevI id="s0156" type="spammer"/>
      <DevI id="s0157" type="spammer"/>
      <DevI id="s0158" type="spammer"/>
      <DevI id="s0159" type="spammer"/>
      <DevI id="s0160" type="spammer"/>
      <DevI id="s0161" type="spammer"/>
      <DevI id="s0162" type="spammer"/>
      <DevI id="s0163" type="spammer"/>
      <DevI id="s0164" type="spammer"/>
      <DevI id="s0165" type="spammer"/>
      <DevI id="s0166" type="spammer"/>
      <DevI id="s0167" type="spammer"/>
      <DevI id="s0168" type="spammer"/>
      <DevI id="s0169" type="spammer"/>
      <DevI id="s0170" type="spammer"/>
      <DevI id="s0171" type="spammer"/>
      <DevI id="s0172" type="spammer"/>
      <DevI id="s0173" type="spammer"/>
      <DevI id="s0174" type="spammer"/>
      <DevI id="s0175" type="spammer"/>
      <DevI id="s0176" type="spammer"/>
      <DevI id="s0177" type="spammer"/>
      <DevI id="s0178" type="spammer"/>
      <DevI id="s0179" type="spammer"/>
      <DevI id="s0180" type="spammer"/>
      <DevI id="s0181" type="spammer"/>
      <DevI id="s0182" type="spammer"/>
      <DevI id="s0183" type="spammer"/>
      <DevI id="s0184" type="spammer"/>
      <DevI id="s0185" type="spammer"/>
      <DevI id="s0186" type="spammer"/>
      <DevI id="s0187" type="spammer"/>
      <DevI id="s0188" type="spammer"/>
      <DevI id="s0189" type="spammer"/>
      <DevI id="s0190" type="spammer"/>
      <DevI id="s0191" type="spammer"/>
      <DevI id="s0192" type="spammer"/>
      <DevI id="s0193" type="spammer"/>
      <DevI id="s0194" type="spammer"/>
      <DevI id="s0195" type="spammer"/>
      <DevI id="s0196" type="spammer"/>
      <DevI id="s0197" type="spammer"/>
      <DevI id="s0198" type="spammer"/>
      <DevI id="s0199" type="spammer"/>
      <DevI id="s0200" type="spammer"/>
      <DevI id="s0201" type="spammer"/>
      <DevI id="s0202" type="spammer"/>
      <DevI id="s0203" type="spammer"/>
      <DevI id="s0204" type="spammer"/>
      <DevI id="s0205" type="spammer"/>
      <DevI id="s0206" type="spammer"/>
      <DevI id="s0207" type="spammer"/>
      <DevI id="s0208" type="spammer"/>
      <DevI id="s0209" type="spammer"/>
      <DevI id="s0210" type="spammer"/>
      <DevI id="s0211" type="spammer"/>
      <DevI id="s0212" type="spammer"/>
      <DevI id="s0213" type="spammer"/>
      <DevI id="s0214" type="spammer"/>
      <DevI id="s0215" type="spammer"/>
      <DevI id="s0216" type="spammer"/>
      <DevI id="s0217" type="spammer"/>
      <DevI id="s0218" type="spammer"/>
      <DevI id="s0219" type="spammer"/>
      <DevI id="s0220" type="spammer"/>
      <DevI id="s0221" type="spammer"/>
      <DevI id="s0222" type="spammer"/>
      <DevI id="s0223" type="spammer"/>
      <DevI id="s0224" type="spammer"/>
      <DevI id="s0225" type="spammer"/>
      <DevI id="s0226" type="spammer"/>
      <DevI id="s0227" type="spammer"/>
      <DevI id="s0228" type="spammer"/>
      <DevI id="s0229" type="spammer"/>
      <DevI id="s0230" type="spammer"/>
      <DevI id="s0231" type="spammer"/>
      <DevI id="s0232" type="spammer"/>
      <DevI id="s0233" type="spammer"/>
      <DevI id="s0234" type="spammer"/>
      <DevI id="s0235" type="spammer"/>
      <DevI id="s0236" type="spammer"/>
      <DevI id="s0237" type="spammer"/>
      <DevI id="s0238" type="spammer"/>
      <DevI id="s0239" type="spammer"/>
      <DevI id="s0240" type="spammer"/>
      <DevI id="s0241" type="spammer"/>
      <DevI id="s0242" type="spammer"/>
      <DevI id="s0243" type="spammer"/>
      <DevI id="s0244" type="spammer"/>
      <DevI id="s0245" type="spammer"/>
      <DevI id="s0246" type="spammer"/>
      <DevI id="s0247" type="spammer"/>
      <DevI id="s0248" type="spammer"/>
      <DevI id="s0249" type="spammer"/>
      <DevI id="s0250" type="spammer"/>
      <DevI id="s0251" type="spammer"/>
      <DevI id="s0252" type="spammer"/>
      <DevI id="s0253" type="spammer"/>
      <DevI id="s0254" type="spammer"/>
      <DevI id="s0255" type="spammer"/>
      
      <DevI id="r" type="receiver"/>
    </DeviceInstances>
    <EdgeInstances>
      <EdgeI path="r:spamIn-s0000:spamOut"/>
    </EdgeInstances>
  </GraphInstance>
</Graphs>